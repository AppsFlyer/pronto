package protogen;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.Attribute;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.ConstantDynamic;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Handle;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.RecordComponentVisitor;
import org.objectweb.asm.Type;
import org.objectweb.asm.TypePath;

public class OriginalGen implements Opcodes {
    public static byte[] dump () throws Exception {

        ClassWriter classWriter = new ClassWriter(0);
        FieldVisitor fieldVisitor;
        RecordComponentVisitor recordComponentVisitor;
        MethodVisitor methodVisitor;
        AnnotationVisitor annotationVisitor0;

        classWriter.visit(V1_8, ACC_PUBLIC | ACC_SUPER, "protogen/PersonProtoMap", null, "clojure/lang/APersistentMap", null);

//        classWriter.visitSource("PersonProtoMap.java", null);

        classWriter.visitInnerClass("protogen/generated/People$Person", "protogen/generated/People", "Person", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

        classWriter.visitInnerClass("protogen/generated/People$Person$Builder", "protogen/generated/People$Person", "Builder", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

        classWriter.visitInnerClass("protogen/generated/People$Address", "protogen/generated/People", "Address", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

        classWriter.visitInnerClass("protogen/generated/People$Like", "protogen/generated/People", "Like", ACC_PUBLIC | ACC_FINAL | ACC_STATIC);

        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_ID", "Lclojure/lang/Keyword;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_NAME", "Lclojure/lang/Keyword;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_EMAIL", "Lclojure/lang/Keyword;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_ADDRESS", "Lclojure/lang/Keyword;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL | ACC_STATIC, "_LIKES", "Lclojure/lang/Keyword;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PRIVATE | ACC_FINAL, "person", "Lprotogen/generated/People$Person;", null, null);
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Person;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(18, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitTypeInsn(INSTANCEOF, "protogen/PersonProtoMap");
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(19, label2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/PersonProtoMap");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "getProto", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(21, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/generated/People$Person", "newBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ASTORE, 1);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(22, label3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IPersistentMap", "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", true);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(23, label4);
            methodVisitor.visitVarInsn(ALOAD, 2);
            Label label5 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label5);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "key", "()Ljava/lang/Object;", true);
            methodVisitor.visitJumpInsn(IFNULL, label5);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(24, label6);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setId", "(I)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(26, label5);
            methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"protogen/generated/People$Person$Builder", "clojure/lang/IMapEntry"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IPersistentMap", "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", true);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(27, label7);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label8 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label8);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "key", "()Ljava/lang/Object;", true);
            methodVisitor.visitJumpInsn(IFNULL, label8);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(28, label9);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/String");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setName", "(Ljava/lang/String;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(30, label8);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"clojure/lang/IMapEntry"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IPersistentMap", "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", true);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(31, label10);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label11 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label11);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "key", "()Ljava/lang/Object;", true);
            methodVisitor.visitJumpInsn(IFNULL, label11);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(32, label12);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/String");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setEmail", "(Ljava/lang/String;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(34, label11);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"clojure/lang/IMapEntry"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IPersistentMap", "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", true);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label13 = new Label();
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(35, label13);
            methodVisitor.visitVarInsn(ALOAD, 5);
            Label label14 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label14);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "key", "()Ljava/lang/Object;", true);
            methodVisitor.visitJumpInsn(IFNULL, label14);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(36, label15);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "clojure/lang/IPersistentMap");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/AddressProtoMap", "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Address;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setAddress", "(Lprotogen/generated/People$Address;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(38, label14);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"clojure/lang/IMapEntry"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IPersistentMap", "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", true);
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label16 = new Label();
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(39, label16);
            methodVisitor.visitVarInsn(ALOAD, 6);
            Label label17 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label17);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "key", "()Ljava/lang/Object;", true);
            methodVisitor.visitJumpInsn(IFNULL, label17);
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(40, label18);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "clojure/lang/IMapEntry", "getValue", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Iterable");
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(41, label19);
            methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ASTORE, 8);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(42, label20);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/Iterable", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(ASTORE, 9);
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitFrame(Opcodes.F_FULL, 10, new Object[] {"clojure/lang/IPersistentMap", "protogen/generated/People$Person$Builder", "clojure/lang/IMapEntry", "clojure/lang/IMapEntry", "clojure/lang/IMapEntry", "clojure/lang/IMapEntry", "clojure/lang/IMapEntry", "java/lang/Iterable", "java/util/List", "java/util/Iterator"}, 0, new Object[] {});
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label22 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label22);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitVarInsn(ASTORE, 10);
            Label label23 = new Label();
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(43, label23);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitTypeInsn(CHECKCAST, "clojure/lang/IPersistentMap");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/LikeProtoMap", "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Like;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(44, label24);
            methodVisitor.visitJumpInsn(GOTO, label21);
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(45, label22);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "addAllLikes", "(Ljava/lang/Iterable;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(47, label17);
            methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLocalVariable("like", "Ljava/lang/Object;", null, label23, label24, 10);
            methodVisitor.visitLocalVariable("likeSeq", "Ljava/lang/Iterable;", "Ljava/lang/Iterable<*>;", label19, label17, 7);
            methodVisitor.visitLocalVariable("protoLikes", "Ljava/util/List;", "Ljava/util/List<Lprotogen/generated/People$Like;>;", label20, label17, 8);
            methodVisitor.visitLocalVariable("map", "Lclojure/lang/IPersistentMap;", null, label0, label25, 0);
            methodVisitor.visitLocalVariable("builder", "Lprotogen/generated/People$Person$Builder;", null, label3, label25, 1);
            methodVisitor.visitLocalVariable("id", "Lclojure/lang/IMapEntry;", null, label4, label25, 2);
            methodVisitor.visitLocalVariable("name", "Lclojure/lang/IMapEntry;", null, label7, label25, 3);
            methodVisitor.visitLocalVariable("email", "Lclojure/lang/IMapEntry;", null, label10, label25, 4);
            methodVisitor.visitLocalVariable("address", "Lclojure/lang/IMapEntry;", null, label13, label25, 5);
            methodVisitor.visitLocalVariable("likes", "Lclojure/lang/IMapEntry;", null, label16, label25, 6);
            methodVisitor.visitMaxs(2, 11);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lclojure/lang/IPersistentMap;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(50, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/APersistentMap", "<init>", "()V", false);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(51, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label2);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(52, label3);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("person can't be null");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(54, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[] {"protogen/PersonProtoMap", "clojure/lang/IPersistentMap"}, 0, new Object[] {});
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/PersonProtoMap", "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Person;", false);
            methodVisitor.visitFieldInsn(PUTFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(55, label4);
            methodVisitor.visitInsn(RETURN);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label5, 0);
            methodVisitor.visitLocalVariable("person", "Lclojure/lang/IPersistentMap;", null, label0, label5, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "(Lprotogen/generated/People$Person;)V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(57, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/APersistentMap", "<init>", "()V", false);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(58, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label2);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(59, label3);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("person can't be null");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(61, label2);
            methodVisitor.visitFrame(Opcodes.F_FULL, 2, new Object[] {"protogen/PersonProtoMap", "protogen/generated/People$Person"}, 0, new Object[] {});
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(PUTFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(62, label4);
            methodVisitor.visitInsn(RETURN);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label5, 0);
            methodVisitor.visitLocalVariable("person", "Lprotogen/generated/People$Person;", null, label0, label5, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "getProto", "()Lprotogen/generated/People$Person;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(65, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "containsKey", "(Ljava/lang/Object;)Z", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(70, label0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitJumpInsn(IFNE, label1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitJumpInsn(IFNE, label1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            methodVisitor.visitJumpInsn(IFNE, label1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label2);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_1);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[] {Opcodes.INTEGER});
            methodVisitor.visitInsn(IRETURN);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label4, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label4, 1);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "entryAt", "(Ljava/lang/Object;)Lclojure/lang/IMapEntry;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(75, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "containsKey", "(Ljava/lang/Object;)Z", false);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(76, label2);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(79, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(80, label3);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(ARETURN);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label4, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label4, 1);
            methodVisitor.visitLocalVariable("val", "Ljava/lang/Object;", null, label3, label4, 2);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "assoc", "(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentMap;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(85, label0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(86, label2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Integer;"));
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPEQ, label4);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(87, label3);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("wrong value type");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(89, label4);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Integer");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(90, label5);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Integer", "intValue", "()I", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setId", "(I)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(92, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label6 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label6);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(93, label7);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            Label label8 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPEQ, label8);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(94, label9);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("wrong value type");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(96, label8);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/String");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(97, label10);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setName", "(Ljava/lang/String;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(99, label6);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label11 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label11);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(100, label12);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            Label label13 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPEQ, label13);
            Label label14 = new Label();
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(101, label14);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("wrong value type");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(103, label13);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/String");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(104, label15);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setEmail", "(Ljava/lang/String;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(106, label11);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label16 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label16);
            Label label17 = new Label();
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(107, label17);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Lprotogen/generated/People$Address;"));
            Label label18 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label18);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(108, label19);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/generated/People$Address");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(109, label20);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setAddress", "(Lprotogen/generated/People$Address;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(111, label18);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Lprotogen/AddressProtoMap;"));
            Label label21 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label21);
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(112, label22);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/AddressProtoMap");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/AddressProtoMap", "getProto", "()Lprotogen/generated/People$Address;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label23 = new Label();
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(113, label23);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setAddress", "(Lprotogen/generated/People$Address;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(115, label21);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitLdcInsn(Type.getType("Lclojure/lang/IPersistentMap;"));
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isAssignableFrom", "(Ljava/lang/Class;)Z", false);
            Label label24 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label24);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(116, label25);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "clojure/lang/IPersistentMap");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitLineNumber(117, label26);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/AddressProtoMap", "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Address;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "setAddress", "(Lprotogen/generated/People$Address;)Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(119, label24);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("wrong value type");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(121, label16);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label27 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label27);
            Label label28 = new Label();
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(122, label28);
            methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Iterable;"));
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isAssignableFrom", "(Ljava/lang/Class;)Z", false);
            Label label29 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label29);
            Label label30 = new Label();
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLineNumber(123, label30);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitTypeInsn(CHECKCAST, "java/lang/Iterable");
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label31 = new Label();
            methodVisitor.visitLabel(label31);
            methodVisitor.visitLineNumber(124, label31);
            methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label32 = new Label();
            methodVisitor.visitLabel(label32);
            methodVisitor.visitLineNumber(125, label32);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/lang/Iterable", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label33 = new Label();
            methodVisitor.visitLabel(label33);
            methodVisitor.visitFrame(Opcodes.F_APPEND,3, new Object[] {"java/lang/Iterable", "java/util/List", "java/util/Iterator"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label34 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label34);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label35 = new Label();
            methodVisitor.visitLabel(label35);
            methodVisitor.visitLineNumber(126, label35);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Lprotogen/generated/People$Like;"));
            Label label36 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label36);
            Label label37 = new Label();
            methodVisitor.visitLabel(label37);
            methodVisitor.visitLineNumber(127, label37);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/generated/People$Like");
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label36);
            methodVisitor.visitLineNumber(129, label36);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/Object"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitLdcInsn(Type.getType("Lprotogen/LikeProtoMap;"));
            Label label38 = new Label();
            methodVisitor.visitJumpInsn(IF_ACMPNE, label38);
            Label label39 = new Label();
            methodVisitor.visitLabel(label39);
            methodVisitor.visitLineNumber(130, label39);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/LikeProtoMap");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/LikeProtoMap", "getProto", "()Lprotogen/generated/People$Like;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label38);
            methodVisitor.visitLineNumber(132, label38);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitLdcInsn(Type.getType("Lclojure/lang/IPersistentMap;"));
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "isAssignableFrom", "(Ljava/lang/Class;)Z", false);
            Label label40 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label40);
            Label label41 = new Label();
            methodVisitor.visitLabel(label41);
            methodVisitor.visitLineNumber(133, label41);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitTypeInsn(CHECKCAST, "clojure/lang/IPersistentMap");
            methodVisitor.visitVarInsn(ASTORE, 7);
            Label label42 = new Label();
            methodVisitor.visitLabel(label42);
            methodVisitor.visitLineNumber(134, label42);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/LikeProtoMap", "mapToProto", "(Lclojure/lang/IPersistentMap;)Lprotogen/generated/People$Like;", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            methodVisitor.visitLabel(label40);
            methodVisitor.visitLineNumber(136, label40);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("bad element type inside collection");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label34);
            methodVisitor.visitLineNumber(139, label34);
            methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            Label label43 = new Label();
            methodVisitor.visitLabel(label43);
            methodVisitor.visitLineNumber(140, label43);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "toBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            Label label44 = new Label();
            methodVisitor.visitLabel(label44);
            methodVisitor.visitLineNumber(141, label44);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "clearLikes", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitVarInsn(ALOAD, 4);
            Label label45 = new Label();
            methodVisitor.visitLabel(label45);
            methodVisitor.visitLineNumber(142, label45);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "addAllLikes", "(Ljava/lang/Iterable;)Lprotogen/generated/People$Person$Builder;", false);
            Label label46 = new Label();
            methodVisitor.visitLabel(label46);
            methodVisitor.visitLineNumber(143, label46);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            Label label47 = new Label();
            methodVisitor.visitLabel(label47);
            methodVisitor.visitLineNumber(139, label47);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(145, label29);
            methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("wrong value type");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(148, label27);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("can't assoc that key");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            Label label48 = new Label();
            methodVisitor.visitLabel(label48);
            methodVisitor.visitLocalVariable("id", "Ljava/lang/Integer;", null, label5, label1, 3);
            methodVisitor.visitLocalVariable("name", "Ljava/lang/String;", null, label10, label6, 3);
            methodVisitor.visitLocalVariable("email", "Ljava/lang/String;", null, label15, label11, 3);
            methodVisitor.visitLocalVariable("address", "Lprotogen/generated/People$Address;", null, label20, label18, 3);
            methodVisitor.visitLocalVariable("address", "Lprotogen/generated/People$Address;", null, label23, label21, 3);
            methodVisitor.visitLocalVariable("map", "Lclojure/lang/IPersistentMap;", null, label26, label24, 3);
            methodVisitor.visitLocalVariable("likeMap", "Lclojure/lang/IPersistentMap;", null, label42, label40, 7);
            methodVisitor.visitLocalVariable("like", "Ljava/lang/Object;", null, label35, label34, 6);
            methodVisitor.visitLocalVariable("likes", "Ljava/lang/Iterable;", "Ljava/lang/Iterable<*>;", label31, label29, 3);
            methodVisitor.visitLocalVariable("protoLikes", "Ljava/util/List;", "Ljava/util/List<Lprotogen/generated/People$Like;>;", label32, label29, 4);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label48, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label48, 1);
            methodVisitor.visitLocalVariable("val", "Ljava/lang/Object;", null, label0, label48, 2);
            methodVisitor.visitMaxs(4, 8);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "assocEx", "(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentMap;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(153, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "containsKey", "(Ljava/lang/Object;)Z", false);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(154, label2);
            methodVisitor.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("Key already present");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(156, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "assoc", "(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentMap;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label3, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label3, 1);
            methodVisitor.visitLocalVariable("val", "Ljava/lang/Object;", null, label0, label3, 2);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "without", "(Ljava/lang/Object;)Lclojure/lang/IPersistentMap;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(161, label0);
            methodVisitor.visitTypeInsn(NEW, "java/lang/UnsupportedOperationException");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitLdcInsn("can't dissoc from a proto map.");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsupportedOperationException", "<init>", "(Ljava/lang/String;)V", false);
            methodVisitor.visitInsn(ATHROW);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label1, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(166, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ACONST_NULL);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label1, 1);
            methodVisitor.visitMaxs(3, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "valAt", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(171, label0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label1);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(172, label2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(175, label1);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label3);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(176, label4);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "getId", "()I", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(178, label3);
            methodVisitor.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label5 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label5);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(179, label6);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "getName", "()Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLineNumber(180, label7);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label8 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label8);
            Label label9 = new Label();
            methodVisitor.visitLabel(label9);
            methodVisitor.visitLineNumber(181, label9);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitLineNumber(183, label8);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(185, label5);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label10 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label10);
            Label label11 = new Label();
            methodVisitor.visitLabel(label11);
            methodVisitor.visitLineNumber(186, label11);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "getEmail", "()Ljava/lang/String;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitLineNumber(187, label12);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label13 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label13);
            Label label14 = new Label();
            methodVisitor.visitLabel(label14);
            methodVisitor.visitLineNumber(188, label14);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitLineNumber(190, label13);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/lang/String"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label10);
            methodVisitor.visitLineNumber(192, label10);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label15 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label15);
            Label label16 = new Label();
            methodVisitor.visitLabel(label16);
            methodVisitor.visitLineNumber(193, label16);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "getAddress", "()Lprotogen/generated/People$Address;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label17 = new Label();
            methodVisitor.visitLabel(label17);
            methodVisitor.visitLineNumber(194, label17);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label18 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label18);
            Label label19 = new Label();
            methodVisitor.visitLabel(label19);
            methodVisitor.visitLineNumber(195, label19);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label18);
            methodVisitor.visitLineNumber(197, label18);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"protogen/generated/People$Address"}, 0, null);
            methodVisitor.visitTypeInsn(NEW, "protogen/AddressProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/AddressProtoMap", "<init>", "(Lprotogen/generated/People$Address;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitLineNumber(200, label15);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "equals", "(Ljava/lang/Object;)Z", false);
            Label label20 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label20);
            Label label21 = new Label();
            methodVisitor.visitLabel(label21);
            methodVisitor.visitLineNumber(201, label21);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETFIELD, "protogen/PersonProtoMap", "person", "Lprotogen/generated/People$Person;");
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person", "getLikesList", "()Ljava/util/List;", false);
            methodVisitor.visitVarInsn(ASTORE, 3);
            Label label22 = new Label();
            methodVisitor.visitLabel(label22);
            methodVisitor.visitLineNumber(202, label22);
            methodVisitor.visitVarInsn(ALOAD, 3);
            Label label23 = new Label();
            methodVisitor.visitJumpInsn(IFNONNULL, label23);
            Label label24 = new Label();
            methodVisitor.visitLabel(label24);
            methodVisitor.visitLineNumber(203, label24);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label23);
            methodVisitor.visitLineNumber(205, label23);
            methodVisitor.visitFrame(Opcodes.F_APPEND,1, new Object[] {"java/util/List"}, 0, null);
            methodVisitor.visitTypeInsn(NEW, "java/util/ArrayList");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            methodVisitor.visitVarInsn(ASTORE, 4);
            Label label25 = new Label();
            methodVisitor.visitLabel(label25);
            methodVisitor.visitLineNumber(206, label25);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "iterator", "()Ljava/util/Iterator;", true);
            methodVisitor.visitVarInsn(ASTORE, 5);
            Label label26 = new Label();
            methodVisitor.visitLabel(label26);
            methodVisitor.visitFrame(Opcodes.F_APPEND,2, new Object[] {"java/util/List", "java/util/Iterator"}, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "hasNext", "()Z", true);
            Label label27 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label27);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/Iterator", "next", "()Ljava/lang/Object;", true);
            methodVisitor.visitTypeInsn(CHECKCAST, "protogen/generated/People$Like");
            methodVisitor.visitVarInsn(ASTORE, 6);
            Label label28 = new Label();
            methodVisitor.visitLabel(label28);
            methodVisitor.visitLineNumber(207, label28);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitTypeInsn(NEW, "protogen/LikeProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/LikeProtoMap", "<init>", "(Lprotogen/generated/People$Like;)V", false);
            methodVisitor.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            methodVisitor.visitInsn(POP);
            Label label29 = new Label();
            methodVisitor.visitLabel(label29);
            methodVisitor.visitLineNumber(208, label29);
            methodVisitor.visitJumpInsn(GOTO, label26);
            methodVisitor.visitLabel(label27);
            methodVisitor.visitLineNumber(209, label27);
            methodVisitor.visitFrame(Opcodes.F_CHOP,1, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/PersistentVector", "create", "(Ljava/util/List;)Lclojure/lang/PersistentVector;", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitLabel(label20);
            methodVisitor.visitLineNumber(212, label20);
            methodVisitor.visitFrame(Opcodes.F_CHOP,2, null, 0, null);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARETURN);
            Label label30 = new Label();
            methodVisitor.visitLabel(label30);
            methodVisitor.visitLocalVariable("name", "Ljava/lang/String;", null, label7, label5, 3);
            methodVisitor.visitLocalVariable("email", "Ljava/lang/String;", null, label12, label10, 3);
            methodVisitor.visitLocalVariable("address", "Lprotogen/generated/People$Address;", null, label17, label15, 3);
            methodVisitor.visitLocalVariable("like", "Lprotogen/generated/People$Like;", null, label28, label29, 6);
            methodVisitor.visitLocalVariable("protoLikes", "Ljava/util/List;", "Ljava/util/List<Lprotogen/LikeProtoMap;>;", label25, label20, 4);
            methodVisitor.visitLocalVariable("likes", "Ljava/util/List;", "Ljava/util/List<Lprotogen/generated/People$Like;>;", label22, label20, 3);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label30, 0);
            methodVisitor.visitLocalVariable("key", "Ljava/lang/Object;", null, label0, label30, 1);
            methodVisitor.visitLocalVariable("notFound", "Ljava/lang/Object;", null, label0, label30, 2);
            methodVisitor.visitMaxs(4, 7);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "count", "()I", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(217, label0);
            methodVisitor.visitInsn(ICONST_5);
            methodVisitor.visitInsn(IRETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "empty", "()Lclojure/lang/IPersistentCollection;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(222, label0);
            methodVisitor.visitTypeInsn(NEW, "protogen/PersonProtoMap");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "protogen/generated/People$Person", "newBuilder", "()Lprotogen/generated/People$Person$Builder;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/generated/People$Person$Builder", "build", "()Lprotogen/generated/People$Person;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/PersonProtoMap", "<init>", "(Lprotogen/generated/People$Person;)V", false);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitMaxs(3, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "seq", "()Lclojure/lang/ISeq;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(227, label0);
            methodVisitor.visitInsn(ICONST_5);
            methodVisitor.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(228, label1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(229, label2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(230, label3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(231, label4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(232, label5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(227, label6);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/ArraySeq", "create", "([Ljava/lang/Object;)Lclojure/lang/ArraySeq;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label7, 0);
            methodVisitor.visitMaxs(8, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "iterator", "()Ljava/util/Iterator;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(237, label0);
            methodVisitor.visitTypeInsn(NEW, "protogen/ArrayIter");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_5);
            methodVisitor.visitTypeInsn(ANEWARRAY, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(238, label1);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(239, label2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(240, label3);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(241, label4);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitTypeInsn(NEW, "clojure/lang/MapEntry");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitFieldInsn(GETSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitLineNumber(242, label5);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "valAt", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "clojure/lang/MapEntry", "<init>", "(Ljava/lang/Object;Ljava/lang/Object;)V", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "protogen/ArrayIter", "<init>", "([Ljava/lang/Object;)V", false);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitLineNumber(237, label6);
            methodVisitor.visitInsn(ARETURN);
            Label label7 = new Label();
            methodVisitor.visitLabel(label7);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label7, 0);
            methodVisitor.visitMaxs(10, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_BRIDGE | ACC_SYNTHETIC, "assoc", "(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/Associative;", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(8, label0);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "protogen/PersonProtoMap", "assoc", "(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentMap;", false);
            methodVisitor.visitInsn(ARETURN);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLocalVariable("this", "Lprotogen/PersonProtoMap;", null, label0, label1, 0);
            methodVisitor.visitMaxs(3, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            methodVisitor.visitCode();
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitLineNumber(9, label0);
            methodVisitor.visitLdcInsn("id");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "protogen/PersonProtoMap", "_ID", "Lclojure/lang/Keyword;");
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitLineNumber(10, label1);
            methodVisitor.visitLdcInsn("name");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "protogen/PersonProtoMap", "_NAME", "Lclojure/lang/Keyword;");
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitLineNumber(11, label2);
            methodVisitor.visitLdcInsn("email");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "protogen/PersonProtoMap", "_EMAIL", "Lclojure/lang/Keyword;");
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitLineNumber(12, label3);
            methodVisitor.visitLdcInsn("address");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "protogen/PersonProtoMap", "_ADDRESS", "Lclojure/lang/Keyword;");
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitLineNumber(13, label4);
            methodVisitor.visitLdcInsn("likes");
            methodVisitor.visitMethodInsn(INVOKESTATIC, "clojure/lang/Keyword", "intern", "(Ljava/lang/String;)Lclojure/lang/Keyword;", false);
            methodVisitor.visitFieldInsn(PUTSTATIC, "protogen/PersonProtoMap", "_LIKES", "Lclojure/lang/Keyword;");
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(1, 0);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();

        return classWriter.toByteArray();
    }
}

